/* This file was generated by SableCC (http://www.sablecc.org/). */

package cours6.syntax.analysis;

import java.util.*;
import cours6.syntax.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPExp().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAAddExp(AAddExp node)
    {
        defaultIn(node);
    }

    public void outAAddExp(AAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExp(AAddExp node)
    {
        inAAddExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAddExp(node);
    }

    public void inASubExp(ASubExp node)
    {
        defaultIn(node);
    }

    public void outASubExp(ASubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExp(ASubExp node)
    {
        inASubExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASubExp(node);
    }

    public void inASimpleExp(ASimpleExp node)
    {
        defaultIn(node);
    }

    public void outASimpleExp(ASimpleExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExp(ASimpleExp node)
    {
        inASimpleExp(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outASimpleExp(node);
    }

    public void inAMultFactor(AMultFactor node)
    {
        defaultIn(node);
    }

    public void outAMultFactor(AMultFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        inAMultFactor(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMultFactor(node);
    }

    public void inADivFactor(ADivFactor node)
    {
        defaultIn(node);
    }

    public void outADivFactor(ADivFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivFactor(node);
    }

    public void inAModFactor(AModFactor node)
    {
        defaultIn(node);
    }

    public void outAModFactor(AModFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        inAModFactor(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getPercent() != null)
        {
            node.getPercent().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAModFactor(node);
    }

    public void inASimpleFactor(ASimpleFactor node)
    {
        defaultIn(node);
    }

    public void outASimpleFactor(ASimpleFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleFactor(ASimpleFactor node)
    {
        inASimpleFactor(node);
        if(node.getSign() != null)
        {
            node.getSign().apply(this);
        }
        outASimpleFactor(node);
    }

    public void inAPosSign(APosSign node)
    {
        defaultIn(node);
    }

    public void outAPosSign(APosSign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosSign(APosSign node)
    {
        inAPosSign(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAPosSign(node);
    }

    public void inANegSign(ANegSign node)
    {
        defaultIn(node);
    }

    public void outANegSign(ANegSign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegSign(ANegSign node)
    {
        inANegSign(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outANegSign(node);
    }

    public void inASimpleSign(ASimpleSign node)
    {
        defaultIn(node);
    }

    public void outASimpleSign(ASimpleSign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleSign(ASimpleSign node)
    {
        inASimpleSign(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outASimpleSign(node);
    }

    public void inANumTerm(ANumTerm node)
    {
        defaultIn(node);
    }

    public void outANumTerm(ANumTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumTerm(ANumTerm node)
    {
        inANumTerm(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumTerm(node);
    }

    public void inAParTerm(AParTerm node)
    {
        defaultIn(node);
    }

    public void outAParTerm(AParTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParTerm(AParTerm node)
    {
        inAParTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParTerm(node);
    }
}
